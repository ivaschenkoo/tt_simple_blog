{"version":3,"sources":["components/Comment/Comment.module.css","components/PostPage/PostPage.module.css","api/api.js","redux/PostReducer.js","redux/store.js","components/Posts/Posts.jsx","components/Posts/Post/Post.jsx","components/Posts/PostsContainer.jsx","components/CreateComment/CreateComment.jsx","components/common/validation.js","components/common/FormikEditForm/FormikEditForm.jsx","components/PostPage/PostPage.jsx","components/Comment/Comment.jsx","components/PostPage/PostPageContainer.jsx","components/common/FormikPostForm/FormikPostForm.jsx","components/CreatePost/CreatePost.jsx","App.js","reportWebVitals.js","index.js","App.module.css","components/common/FormikPostForm/FormikPostForm.module.css","components/Posts/Post/Post.module.css","components/common/FormikEditForm/FormikEditForm.module.css","components/CreateComment/CreateComment.module.css","components/Posts/Posts.module.css","components/CreatePost/CreatePost.module.css"],"names":["module","exports","instance","axios","create","baseURL","headers","PostAPI","get","then","response","data","post","postId","put","delete","CommentAPI","SET_POSTS","SET_COMMENTS","ADD_POST","ADD_COMMENT","REMOVE_POST","CHANGE_POST","initialState","posts","comments","reducers","combineReducers","state","action","type","editPosts","map","el","id","toString","filter","store","createStore","applyMiddleware","thunk","Posts","props","className","styles","wrapper","title","postsList","Post","body","length","slice","postItem","to","link","description","firstLetter","toUpperCase","connect","CreateComment","validation","yup","shape","required","test","val","undefined","initialValues","validateOnBlur","validationSchema","onSubmit","values","resetForm","createComment","formikProps","name","as","text","touched","errors","errorMessage","onClick","handleSubmit","disabled","isValid","dirty","button","FormikEditForm","postTitle","postBody","editPost","setEditMode","value","onChange","handleChange","onBlur","handleBlur","placeholder","PostPage","useState","editMode","toolWrapper","deletePost","commentTitle","commentsList","Comment","comment","compose","withRouter","commentData","dispatch","addComment","removePost","postData","changePost","match","params","find","FormikPostForm","sending","setSend","createdPostId","setCreatedPostId","linkActive","createPost","CreatePost","getComments","setComments","getPosts","setPosts","addPost","useEffect","headerWrapper","container","logo","mainWrapper","exact","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","basename","document","getElementById"],"mappings":"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","file":"static/js/main.31317e4a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comment\":\"Comment_comment__3dg-3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"toolWrapper\":\"PostPage_toolWrapper__lvSCC\",\"link\":\"PostPage_link__etB6z\",\"button\":\"PostPage_button__XN9U2\",\"wrapper\":\"PostPage_wrapper__2U7KT\",\"commentTitle\":\"PostPage_commentTitle__2q0d2\",\"commentsList\":\"PostPage_commentsList__2hSZ1\"};","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://bloggy-api.herokuapp.com/\",\r\n    headers: {\r\n        'Content-Type': 'application/json'\r\n    }\r\n})\r\n\r\nexport const PostAPI = {\r\n    getPosts() {\r\n        return instance.get('/posts').then(response => response.data)\r\n    },\r\n    createPost(data) {\r\n        return instance.post('/posts', data).then(response => response.data)\r\n    },\r\n    changePost(postId, data) {\r\n        return instance.put(`posts/${postId}`, data).then(response => response.data)\r\n    },\r\n    deletePost(postId) {\r\n        return instance.delete(`/posts/${postId}`).then(response => response.data)\r\n    }\r\n}\r\n\r\nexport const CommentAPI = {\r\n    getComments() {\r\n        return instance.get('/comments').then(response => response.data)\r\n    },\r\n    createComment(data) {\r\n        return instance.post('/comments', data).then(response => response.data)\r\n    }\r\n}","import {CommentAPI, PostAPI} from \"../api/api\";\r\n\r\n\r\nconst SET_POSTS = 'SET-POSTS';\r\nconst SET_COMMENTS = 'SET-COMMENTS';\r\nconst ADD_POST = 'ADD-POST';\r\nconst ADD_COMMENT = 'ADD-COMMENT';\r\nconst REMOVE_POST = 'REMOVE-POST';\r\nconst CHANGE_POST = 'CHANGE-POST';\r\n\r\nlet initialState = {\r\n    posts: [],\r\n    comments: []\r\n};\r\n\r\nexport const postReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_POSTS:\r\n            return {\r\n                ...state,\r\n                posts: [...action.data]\r\n            };\r\n        case ADD_POST:\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, action.data]\r\n            }\r\n        case CHANGE_POST:\r\n            // eslint-disable-next-line array-callback-return\r\n            let editPosts = [...state.posts].map(el => {\r\n                if (el.id.toString() === action.postId) {\r\n                    return {...el, ...action.data}\r\n                }\r\n                return el;\r\n            })\r\n            return {\r\n                ...state,\r\n                posts: [...editPosts]\r\n            }\r\n        case REMOVE_POST:\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts].filter(el => el.id.toString() !== action.postId),\r\n            }\r\n        case SET_COMMENTS:\r\n            return {\r\n                ...state,\r\n                comments: [...action.data]\r\n            }\r\n        case ADD_COMMENT:\r\n            return {\r\n                ...state,\r\n                comments: [...state.comments, action.data]\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const setPosts = (data) => ({\r\n    type: SET_POSTS,\r\n    data,\r\n})\r\nexport const setComments = (data) => ({\r\n    type: SET_COMMENTS,\r\n    data,\r\n})\r\nexport const addPost = (data) => ({\r\n    type: ADD_POST,\r\n    data,\r\n})\r\nexport const changePost = (postId, data) => ({\r\n    type: CHANGE_POST,\r\n    postId,\r\n    data,\r\n})\r\nexport const addComment = (data) => ({\r\n    type: ADD_COMMENT,\r\n    data,\r\n})\r\nexport const removePost = (postId) => ({\r\n    type: REMOVE_POST,\r\n    postId\r\n})\r\n\r\n\r\nexport const getPosts = () => (dispatch) => {\r\n    PostAPI.getPosts().then(data => {\r\n        dispatch(setPosts(data))\r\n    })\r\n}\r\nexport const createPost = (postData) => (dispatch) => {\r\n    return PostAPI.createPost(postData).then(data => {\r\n        dispatch(addPost(data))\r\n        return data;\r\n    })\r\n}\r\nexport const editPost = (postId, postData) => (dispatch) => {\r\n    return PostAPI.changePost(postId, postData).then(data => {\r\n        dispatch(changePost(postId, postData))\r\n    })\r\n}\r\nexport const deletePost = (postId) => (dispatch) => {\r\n    PostAPI.deletePost(postId).then(data => {\r\n        dispatch(removePost(postId))\r\n    })\r\n}\r\nexport const getComments = () => (dispatch) => {\r\n    CommentAPI.getComments().then(data => {\r\n        dispatch(setComments(data))\r\n    })\r\n}\r\nexport const createComment = (commentData) => (dispatch) => {\r\n    CommentAPI.createComment(commentData).then(data => {\r\n        dispatch(addComment(data))\r\n    })\r\n}","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {postReducer} from './PostReducer';\r\nimport thunk from \"redux-thunk\";\r\n\r\n\r\nlet reducers = combineReducers({\r\n    posts: postReducer,\r\n})\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunk))\r\n\r\nexport default store;","import React from 'react';\r\nimport styles from './Posts.module.css'\r\n\r\n\r\nconst Posts = (props) => {\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            <h1 className={styles.title}>Latest posts</h1>\r\n            <ul className={styles.postsList}>\r\n                {props.posts}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Posts","import React from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport styles from './Post.module.css'\r\n\r\n\r\nconst Post = (props) => {\r\n    let body = props.body?.length > 200 ? `${props.body.slice(0, 200)}...` : props.body\r\n\r\n    return (\r\n        <li className={styles.postItem}>\r\n            <span className={styles.wrapper}>\r\n                <NavLink to={`/posts/${props.post}`} className={styles.link}>\r\n                    <h2 className={styles.title}>{props.title}</h2>\r\n                </NavLink>\r\n                <p className={styles.description}>{body}</p>\r\n            </span>\r\n            <span className={styles.firstLetter}>{props.title[0]?.toUpperCase()}</span>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Post","import React from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport Posts from \"./Posts\";\r\nimport Post from \"./Post/Post\";\r\n\r\n\r\nconst PostsContainer = (props) => {\r\n    let posts = props.posts.map(el => <Post key={el.id} post={el.id} title={el.title} body={el.body} />)\r\n\r\n    return <Posts posts={posts} />\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    posts: state.posts.posts,\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, {})(PostsContainer)","import React from \"react\";\r\nimport {Field, Formik} from 'formik';\r\nimport * as yup from \"yup\";\r\nimport styles from './CreateComment.module.css'\r\n\r\n\r\nconst CreateComment = (props) => {\r\n    const validation = yup.object().shape({\r\n        body: yup.string().required('Body is required')\r\n            .test('len', 'Must be exactly 10 characters', val => val !== undefined && val.length > 10),\r\n    })\r\n\r\n    return (\r\n        <div className={styles.wrapper} >\r\n            <Formik\r\n                initialValues={{\r\n                    body: '',\r\n                }}\r\n                validateOnBlur\r\n                validationSchema={validation}\r\n                onSubmit={(values, {resetForm}) => {\r\n                    props.createComment({\r\n                        \"postId\": props.postId,\r\n                        \"body\": values.body,\r\n                    })\r\n                    resetForm()\r\n                }}\r\n            >\r\n                {(formikProps) => (\r\n                    <>\r\n                        <Field name=\"body\" as=\"textarea\" className={styles.text} />\r\n                        {formikProps.touched.body && (formikProps.errors.body\r\n                            && <p className={styles.errorMessage}>{formikProps.errors.body}</p>)}\r\n                        <button type='submit'\r\n                                onClick={formikProps.handleSubmit}\r\n                                disabled={!formikProps.isValid && !formikProps.dirty}\r\n                                className={styles.button}\r\n                        >\r\n                            Send comment\r\n                        </button>\r\n                    </>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateComment","import * as yup from \"yup\";\r\n\r\nexport const validation = yup.object().shape({\r\n    title: yup.string().required('Title is required')\r\n        .test('len', 'Must be exactly 10 characters', val => val !== undefined && val.length > 10),\r\n    body: yup.string().required('Body is required')\r\n        .test('len', 'Must be exactly 10 characters', val => val !== undefined && val.length > 10),\r\n})","import React from \"react\";\r\nimport {Field, Formik} from \"formik\";\r\nimport styles from './FormikEditForm.module.css'\r\nimport {validation} from \"../validation\";\r\n\r\n\r\nconst FormikEditForm = (props) => {\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                title: props.postTitle,\r\n                body: props.postBody,\r\n            }}\r\n            validateOnBlur\r\n            validationSchema={validation}\r\n            onSubmit={(values) => {\r\n                props.editPost(props.postId, {\r\n                    'title': values.title,\r\n                    'body': values.body,\r\n                }).then(() => {\r\n                    props.setEditMode(false)\r\n                })\r\n\r\n            }}\r\n        >\r\n            {(formikProps) => (\r\n                <>\r\n                    <input type=\"text\"\r\n                           name='title'\r\n                           value={formikProps.values.title}\r\n                           onChange={formikProps.handleChange}\r\n                           onBlur={formikProps.handleBlur}\r\n                           className={styles.title}\r\n                    />\r\n\r\n                    {formikProps.touched.title && (formikProps.errors.title\r\n                        && <p className={styles.errorMessage}>{formikProps.errors.title}</p>)}\r\n\r\n                    <Field name=\"body\" as=\"textarea\" placeholder='Text' className={styles.text}/>\r\n\r\n                    {formikProps.touched.body && (formikProps.errors.body\r\n                        && <p className={styles.errorMessage}>{formikProps.errors.body}</p>)}\r\n\r\n                    <button type='submit'\r\n                            onClick={formikProps.handleSubmit}\r\n                            disabled={!formikProps.isValid && !formikProps.dirty}\r\n                            className={styles.button}\r\n                    >\r\n                        Update Post\r\n                    </button>\r\n                </>\r\n            )}\r\n        </Formik>\r\n    )\r\n}\r\n\r\nexport default FormikEditForm","import React, {useState} from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport styles from './PostPage.module.css'\r\nimport CreateComment from \"../CreateComment/CreateComment\";\r\nimport FormikEditForm from \"../common/FormikEditForm/FormikEditForm\";\r\n\r\n\r\nconst PostPage = (props) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    return (\r\n        <div>\r\n            <div className={styles.toolWrapper}>\r\n                <NavLink to='/' className={styles.link}>Back</NavLink>\r\n                <div>\r\n                    {!editMode ?\r\n                        <button type='button'\r\n                                className={styles.button}\r\n                                onClick={() => setEditMode(true)}\r\n                        >\r\n                            Edit post\r\n                        </button>\r\n                        :\r\n                        <button type='button'\r\n                                className={styles.button}\r\n                                onClick={() => setEditMode(false)}\r\n                        >\r\n                            Cancel edit\r\n                        </button>\r\n                    }\r\n                    <button type='button'\r\n                            className={styles.button}\r\n                            onClick={() => {\r\n                                props.deletePost(props.postId)\r\n                            }}\r\n                    >\r\n                        Delete post\r\n                    </button>\r\n                </div>\r\n\r\n            </div>\r\n            <div className={styles.wrapper}>\r\n                {!editMode ?\r\n                    <>\r\n                        <h1>{props.title}</h1>\r\n                        <p>{props.body}</p>\r\n                    </>\r\n                    :\r\n                    <>\r\n                        <FormikEditForm postId={props.postId}\r\n                                        postTitle={props.title}\r\n                                        postBody={props.body}\r\n                                        editPost={props.editPost}\r\n                                        setEditMode={setEditMode}\r\n                        />\r\n                    </>\r\n                }\r\n\r\n            </div>\r\n            <div className={styles.wrapper}>\r\n                <p className={styles.commentTitle}>Comments</p>\r\n                <CreateComment postId={props.postId} createComment={props.createComment}/>\r\n                <ul className={styles.commentsList}>\r\n                    {props.comments}\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PostPage","import React from 'react';\r\nimport styles from './Comment.module.css'\r\n\r\n\r\nconst Comment = (props) => {\r\n    return (\r\n        <li className={styles.comment}>{props.text}</li>\r\n    )\r\n}\r\n\r\nexport default Comment","import React from \"react\";\r\nimport {compose} from \"redux\";\r\nimport {withRouter, Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport PostPage from \"./PostPage\";\r\nimport Comment from \"../Comment/Comment\";\r\nimport {createComment, deletePost, editPost} from \"../../redux/PostReducer\";\r\n\r\n\r\nconst PostPageContainer = (props) => {\r\n    let postId = props.match.params.postId;\r\n    let post = props.posts?.find(el => el.id.toString() === postId)\r\n    let comments = props.comments?.filter(el => el.postId.toString() === postId)\r\n        ?.map(el => <Comment key={el.id} text={el.body}/>)\r\n\r\n    if (!post) {\r\n        return <Redirect to='/' />\r\n    }\r\n\r\n    return <PostPage postId={postId}\r\n                     title={post.title}\r\n                     body={post.body}\r\n                     comments={comments}\r\n                     deletePost={props.deletePost}\r\n                     editPost={props.editPost}\r\n                     createComment={props.createComment}/>\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    posts: state.posts.posts,\r\n    comments: state.posts.comments,\r\n})\r\n\r\nexport default compose(\r\n    withRouter,\r\n    connect(mapStateToProps, {createComment, deletePost, editPost})\r\n)(PostPageContainer)","import React, {useState} from \"react\";\r\nimport {Field, Formik} from \"formik\";\r\nimport styles from './FormikPostForm.module.css'\r\nimport {validation} from \"../validation\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nconst FormikPostForm = (props) => {\r\n    const [sending, setSend] = useState(false);\r\n    const [createdPostId, setCreatedPostId] = useState('');\r\n\r\n    return (\r\n        <>\r\n            <p className={`${styles.link} ${sending ? styles.linkActive : null}`}>\r\n                The post was created.\r\n                <NavLink to={`/posts/${createdPostId}`}>Go to post</NavLink>\r\n            </p>\r\n            <Formik\r\n                initialValues={{\r\n                    title: '',\r\n                    body: '',\r\n                }}\r\n                validateOnBlur\r\n                validationSchema={validation}\r\n                onSubmit={(values, {resetForm}) => {\r\n                    props.createPost({\r\n                        'title': values.title,\r\n                        'body': values.body,\r\n                    }).then(data => {\r\n                        setCreatedPostId(data.id)\r\n                        setSend(true)\r\n                    })\r\n                    resetForm({title: '', body: ''})\r\n                }}\r\n            >\r\n                {(formikProps) => (\r\n                    <>\r\n                        <input type=\"text\"\r\n                               name='title'\r\n                               placeholder='Title'\r\n                               value={formikProps.values.title}\r\n                               onChange={formikProps.handleChange}\r\n                               onBlur={formikProps.handleBlur}\r\n                               className={styles.title}\r\n                        />\r\n\r\n                        {formikProps.touched.title && (formikProps.errors.title\r\n                            && <p className={styles.errorMessage}>{formikProps.errors.title}</p>)}\r\n\r\n                        <Field name=\"body\" as=\"textarea\" placeholder='Text' className={styles.text}/>\r\n\r\n                        {formikProps.touched.body && (formikProps.errors.body\r\n                            && <p className={styles.errorMessage}>{formikProps.errors.body}</p>)}\r\n\r\n                        <button type='submit'\r\n                                onClick={formikProps.handleSubmit}\r\n                                disabled={!formikProps.isValid && !formikProps.dirty}\r\n                                className={styles.button}\r\n                        >\r\n                            Create post\r\n                        </button>\r\n                    </>\r\n                )}\r\n            </Formik>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default FormikPostForm","import React from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport styles from \"./CreatePost.module.css\";\r\nimport FormikPostForm from \"../common/FormikPostForm/FormikPostForm\";\r\n\r\n\r\nconst CreatePost = (props) => {\r\n    return (\r\n        <div>\r\n            <NavLink to='/' className={styles.link}>Back</NavLink>\r\n            <h1 className={styles.title}>Create new post</h1>\r\n            <div className={styles.wrapper}>\r\n                <FormikPostForm createPost={props.createPost} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreatePost","import React, {useEffect} from \"react\";\nimport {NavLink, Route, Switch} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport styles from './App.module.css'\nimport {createPost, getComments, getPosts} from \"./redux/PostReducer\";\nimport PostsContainer from \"./components/Posts/PostsContainer\";\nimport PostPageContainer from \"./components/PostPage/PostPageContainer\";\nimport CreatePost from \"./components/CreatePost/CreatePost\";\n\n\n\nconst App = (props) => {\n\n    useEffect(() => {\n        props.getPosts()\n        props.getComments()\n    }, [props])\n\n    return (\n        <div className={styles.wrapper}>\n            <div className={styles.headerWrapper}>\n                <header className={styles.container}>\n                    <NavLink to='/' className={styles.logo}>Inquire</NavLink>\n                    <NavLink to='/post/new' className={styles.link}>Create post</NavLink>\n                </header>\n            </div>\n\n            <div className={styles.mainWrapper}>\n                <main className={styles.container}>\n                    <Switch>\n                        <Route exact path='/' render={() => <PostsContainer />} />\n                        <Route exact path='/post/new' render={() => <CreatePost createPost={props.createPost} />} />\n                        <Route path='/posts/:postId?' render={() => <PostPageContainer />} />\n                    </Switch>\n                </main>\n            </div>\n        </div>\n    )\n}\n\nlet mapStateToProps = (state) => ({\n\n})\n\nexport default connect(mapStateToProps, {getComments, getPosts, createPost})(App)","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport store from \"./redux/store\";\nimport {Provider} from \"react-redux\";\nimport {BrowserRouter} from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <BrowserRouter basename=\"/tt_simple_blog\">\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1LgNn\",\"wrapper\":\"App_wrapper__3tNhG\",\"headerWrapper\":\"App_headerWrapper__2tFvb\",\"logo\":\"App_logo__2Oj_6\",\"link\":\"App_link__1Ydnk\",\"mainWrapper\":\"App_mainWrapper__3Need\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"FormikPostForm_title__1WahT\",\"text\":\"FormikPostForm_text__37atj\",\"link\":\"FormikPostForm_link__Jas37\",\"linkActive\":\"FormikPostForm_linkActive__1zTLS\",\"errorMessage\":\"FormikPostForm_errorMessage__2AV9c\",\"button\":\"FormikPostForm_button__2JL9T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postItem\":\"Post_postItem__1RTkZ\",\"wrapper\":\"Post_wrapper__35Akj\",\"link\":\"Post_link__2O_mO\",\"title\":\"Post_title__NbuSu\",\"description\":\"Post_description__19oei\",\"firstLetter\":\"Post_firstLetter__1mX1A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"FormikEditForm_title__1zf5Q\",\"text\":\"FormikEditForm_text__1-iE3\",\"errorMessage\":\"FormikEditForm_errorMessage__295Hq\",\"button\":\"FormikEditForm_button__1iqaK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"CreateComment_wrapper__1hZuT\",\"text\":\"CreateComment_text__7rhci\",\"errorMessage\":\"CreateComment_errorMessage__2zxm7\",\"button\":\"CreateComment_button__2Qry-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Posts_wrapper__1Ftl2\",\"title\":\"Posts_title__1Qx8e\",\"postsList\":\"Posts_postsList__2FJ1I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"CreatePost_wrapper__3Q0uA\",\"title\":\"CreatePost_title__2raia\",\"link\":\"CreatePost_link___wpSD\"};"],"sourceRoot":""}